package teetime;

import java.util.Date;
import java.util.Iterator;
import java.util.logging.Level;
import java.util.logging.Logger;

import webscraper.net.WebSession;
import teetime.ajax.BeginBooking;
import teetime.ajax.CompleteBooking;
import teetime.ajax.LockTeeTime;
import teetime.ajax.SearchMember;
import teetime.asp.Booking;
import teetime.asp.Groups;
import teetime.asp.MemberName;
import teetime.asp.Login;
import teetime.asp.TeeTimes;

public class TeeTime {

	private static final String PATH_LOGIN = "/login.aspx";
	private static final String PATH_TEETIME_BASE = "/TeeTimes";
	private static final String PAGE_TEETIME = "/TeeSheet.aspx";
	private static final String PAGE_BOOKING = "/Booking.aspx";
	private static final String PAGE_GROUPS = "/Groups.aspx";
	private static final String PATH_AJAX = "/CMSPages/CHO/AjaxMethodHandler.aspx/AjaxMethod";

	private boolean loggedIn;
	private String siteName;
	private CoursePreferences prefs;
	private String viewState;
	private WebSession session;

	/**
	 * 
	 * @param siteName base name of the URL, e.g. prestonwood.com, www.google.com, etc.
	 */
	public TeeTime(String siteName) {
		Logger log = Logger.getLogger("zero.util.net");
		log.setLevel(Level.OFF);

		this.siteName = siteName;
		
		startNewSession();
		
		loggedIn = false;
	}
	
	private void startNewSession() {
		session = new WebSession(getSecureUrl());
		session.setSaveCookies(true);
		session.setSaveHeaders(true);
	}
	
	private String getSecureUrl() {
		String baseUrl = "https://" + this.siteName;
		return baseUrl;
	}

	private String getUrl() {
		String baseUrl = "http://" + this.siteName;
		return baseUrl;
	}

	private WebSession getWebSession() {
		return session;
	}

	public boolean login(String userid, String password) {

		Login page = new Login(getWebSession(), PATH_LOGIN);
		
		boolean result = page.send(userid, password);
		if (result) {
			// remember the state variable for subsequent calls
			viewState = page.getViewState();
			loggedIn = true;
		}
		
		return result;
	}

	public void setCoursePreferences(CoursePreferences prefs) {
		this.prefs = prefs;
	}
	
	/**
	 * Return a list of golfers who match the given input string
	 * 
	 * @param name the name to search against
	 * @return a list of Golfers that match the request
	 */
	public Golfers getMemberList(String name) {
		if (!loggedIn) {
			System.err.println("getMemberList: Log in first!");
			return null;
		}

		// have to revert to http vs. https at this point; the site redirects to http
		// after a successful login
		// and the built in HTTPConnection doesn't seem to follow the redirect with the
		// switch in protocol
		getWebSession().setBaseUrl(getUrl());

		String path = PATH_TEETIME_BASE + PAGE_GROUPS;
		
		MemberName page = new MemberName(getWebSession(), path);
		page.setViewState(viewState);
		
		if (page.send()) {

			viewState = page.getViewState();

			SearchMember ajax = new SearchMember(getWebSession(), PATH_AJAX);
			ajax.setReferer(pathGroups);
			
			if (ajax.send(name)) {
				return ajax.getSearchResults();
			}
		}
		
		return null;
	}

	
	/**
	 * Find tee times that match the given input
	 * 
	 * @param theTime the date and time we want.  Any times before this will be filtered out
	 * @return a list of TimeSlots that match the request
	 */
	public TimeSlots getMatchingTeeTimes(Date theTime) {
		if (!loggedIn) {
			System.err.println("getMatchingTeeTimes: Log in first!");
			return null;
		}

		// have to revert to http vs. https at this point; the site redirects to http
		// after a successful login
		// and the built in HTTPConnection doesn't seem to follow the redirect with the
		// switch in protocol
		getWebSession().setBaseUrl(getUrl());

		String path = PATH_TEETIME_BASE + PAGE_TEETIME;
		
		TeeTimes page = new TeeTimes(getWebSession(), path);
		page.setViewState(viewState);
		
		if (page.send(theTime)) {

			viewState = page.getViewState();

			TimeSlots list = page.getAvailableTimes();

			if (list!=null) {
				list.filter(theTime, prefs);
			}

			return list;
		}
		
		return null;
	}

	/**
	 * Find member information for the currently logged in user
	 * 
	 * @return a String representing the name of the member
	 */
	public String getMemberInfo() {
		if (!loggedIn) {
			System.err.println("getMemberInfo: Log in first!");
			return null;
		}

		// have to revert to http vs. https at this point; the site redirects to http
		// after a successful login
		// and the built in HTTPConnection doesn't seem to follow the redirect with the
		// switch in protocol
		getWebSession().setBaseUrl(getUrl());

		String path = PATH_TEETIME_BASE + PAGE_TEETIME;
		
		TeeTimes page = new TeeTimes(getWebSession(), path);
		page.setViewState(viewState);
		
		if (page.send()) {

			viewState = page.getViewState();

			TimeSlots list = page.getAvailableTimes();

			if (list!=null) {
				list.filter(theTime, prefs);
			}

			return list;
		}
		
		return null;
	}

	/**
	 * Attempt to book a tee time matching teeTime for the golfers given
	 * 
	 * @param theTime the date and time you want to book
	 * @param golfers the golfers to associate with this tee time
	 * @return
	 */
	public TimeSlot reserve(Date theTime, Golfers golfers) {
		
		TimeSlots list = getMatchingTeeTimes( theTime );
		
		if (list != null) {
			
			Iterator<TimeSlot> it = list.iterator();
			
			while (it.hasNext()) {
				TimeSlot ts = it.next();
				
				if (ts.isEmpty()) {
					System.out.println("Empty TimeSlot " + ts);

					if (holdTimeSlot(ts)) {
						System.out.println("Held time slot " + ts);
						
						if (completeBooking(golfers)) {
							return ts;
						}
					}
				}
			}
		}

		return null;
	}

	private boolean holdTimeSlot(TimeSlot ts) {
		if (!loggedIn) {
			System.err.println("Session.getTimeSlot: Log in first!");
			return false;
		}

		// have to revert to http vs. https at this point; the site redirects to http
		// after a successful login
		getWebSession().setBaseUrl(getUrl());

		// first request a lock on the available tee time. this could fail, in which
		// case we return
		// false from the send() call. this could happen when another user has accessed
		// the page
		// and locked the tee time before we did
		String referer = PATH_TEETIME_BASE + PAGE_TEETIME;
		
		BeginBooking page = new BeginBooking(getWebSession(), PATH_AJAX);
		page.setReferer(referer);
		
		if (page.send(ts)) {

			// a successful lock of the tee time will return us a page for actually booking
			// the time. follow that redirect to finish booking
			String redirectPath = page.getRedirectPath();

			Booking pageBooking = new Booking(getWebSession(), redirectPath);
			
			if (pageBooking.send()) {
				viewState = pageBooking.getViewState();

				// obtain the lock via Ajax call
				LockTeeTime ajaxLock = new LockTeeTime(getWebSession(), PATH_AJAX);
				ajaxLock.setReferer(redirectPath);
				
				if (ajaxLock.send()) {
					// book the tee time?
					return true;
				}
			}
		}

		return false;
	}

	private boolean completeBooking(Golfers golfers) {
		if (!loggedIn) {
			System.err.println("Session.completeBooking: Log in first!");
			return false;
		}

		// have to revert to http vs. https at this point; the site redirects to http
		// after a successful login
		getWebSession().setBaseUrl(getUrl());

		// first request a lock on the available tee time. this could fail, in which
		// case we return
		// false from the send() call. this could happen when another user has accessed
		// the page
		// and locked the tee time before we did
		String referer = PATH_TEETIME_BASE + PAGE_BOOKING;
		
		// obtain the lock via Ajax call
		CompleteBooking ajaxBooking = new CompleteBooking(getWebSession(), PATH_AJAX);
		ajaxBooking.setReferer(referer);
		
		if (ajaxBooking.send(golfers)) {
			// booked the tee time?
			return true;
		}

		return false;
	}

	public void logout() {
		if (loggedIn) {
			
			// reset the session which will drop all existing credentials for the current
			// logged in user
			startNewSession();
			
			loggedIn = false;
		}
	}


}
